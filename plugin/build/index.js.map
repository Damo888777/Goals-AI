{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,yDAA0E;AAE1E,uDAAmD;AAcnD;;GAEG;AACH,MAAM,UAAU,GAAkC,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;;IACpE,MAAM,QAAQ,GAAG,CAAA,MAAA,MAAM,CAAC,GAAG,0CAAE,gBAAgB,KAAI,iBAAiB,CAAA;IAElE,qDAAqD;IACrD,MAAM,UAAU,GACd,OAAO,CAAC,UAAU,IAAI,SAAS,QAAQ,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAE,CAAA;IAEzE,2CAA2C;IAC3C,IAAI,CAAC,MAAM,CAAC,GAAG;QAAG,MAAiD,CAAC,GAAG,GAAG,EAAE,CAAA;IAC5E,MAAM,SAAS,GAAG,MAAM,CAAC,GAAuB,CAAA;IAEhD,uBAAuB;IACvB,SAAS,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,CAAA;IAEpC,mDAAmD;IACnD,MAAM,GAAG,IAAA,sCAAqB,EAAC,MAAM,EAAE,CAAC,MAAM,EAAE,EAAE;QAChD,MAAM,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,uCAAuC,CAAC,CAAA;QAE5E,8DAA8D;QAC9D,MAAM,MAAM,GAAa,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC;YAC/C,CAAC,CAAE,SAAsB;YACzB,CAAC,CAAC,OAAO,SAAS,KAAK,QAAQ;gBAC/B,CAAC,CAAC,CAAC,SAAS,CAAC;gBACb,CAAC,CAAC,EAAE,CAAA;QAEN,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACjC,MAAM,CAAC,UAAU,CAAC,uCAAuC,CAAC,GAAG;gBAC3D,GAAG,MAAM;gBACT,UAAU;aACX,CAAA;QACH,CAAC;QACD,OAAO,MAAM,CAAA;IACf,CAAC,CAAC,CAAA;IAEF,8DAA8D;IAC9D,SAAS,CAAC,cAAc,CAAC,GAAG;QAC1B,gBAAgB,EAAE,GAAG,QAAQ,SAAS;QACtC,YAAY,EAAE;YACZ,uCAAuC,EAAE,CAAC,UAAU,CAAC;SACtD;KACF,CAAA;IAED,+CAA+C;IAC/C,MAAM,GAAG,IAAA,6BAAa,EAAC,MAAM,EAAE,EAAE,GAAG,OAAO,EAAE,UAAU,EAAE,CAAC,CAAA;IAE1D,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAED,kBAAe,UAAU,CAAA","sourcesContent":["import { ConfigPlugin, withEntitlementsPlist } from \"@expo/config-plugins\"\nimport { ExpoConfig } from \"@expo/config-types\"\nimport { withWidgetIos } from \"./ios/withWidgetIos\"\n\nexport interface WithWidgetProps {\n  devTeamId: string\n  appGroupId?: string\n}\n\n// Lockerer Typ für iOS-Objekt (erweiterbar)\ninterface IOSConfigMutable {\n  teamId?: string\n  entitlements?: Record<string, any>\n  [key: string]: any\n}\n\n/**\n * Expo Config Plugin zum Einrichten eines Widget Targets mit App Group Support.\n */\nconst withWidget: ConfigPlugin<WithWidgetProps> = (config, options) => {\n  const bundleId = config.ios?.bundleIdentifier || \"com.example.app\"\n\n  // App Group ID generieren, falls keine angegeben ist\n  const appGroupId =\n    options.appGroupId || `group.${bundleId.replace(/[^a-zA-Z0-9.]/g, \"\")}`\n\n  // iOS sicherstellen + Mutability erzwingen\n  if (!config.ios) (config as ExpoConfig & { ios: IOSConfigMutable }).ios = {}\n  const iosConfig = config.ios as IOSConfigMutable\n\n  // ✅ Dev Team ID setzen\n  iosConfig.teamId = options.devTeamId\n\n  // ✅ App Group Entitlement für Haupt-App hinzufügen\n  config = withEntitlementsPlist(config, (config) => {\n    const rawGroups = config.modResults[\"com.apple.security.application-groups\"]\n\n    // Typischerweise string[] oder undefined, wir casten defensiv\n    const groups: string[] = Array.isArray(rawGroups)\n      ? (rawGroups as string[])\n      : typeof rawGroups === \"string\"\n      ? [rawGroups]\n      : []\n\n    if (!groups.includes(appGroupId)) {\n      config.modResults[\"com.apple.security.application-groups\"] = [\n        ...groups,\n        appGroupId,\n      ]\n    }\n    return config\n  })\n\n  // ✅ Widget Target simulieren (für interne Konsistenz bei EAS)\n  iosConfig[\"widgetTarget\"] = {\n    bundleIdentifier: `${bundleId}.widget`,\n    entitlements: {\n      \"com.apple.security.application-groups\": [appGroupId],\n    },\n  }\n\n  // ✅ Übergib Parameter an dein iOS Widget Setup\n  config = withWidgetIos(config, { ...options, appGroupId })\n\n  return config\n}\n\nexport default withWidget\n"]}