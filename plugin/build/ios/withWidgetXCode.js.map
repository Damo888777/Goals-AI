{"version":3,"file":"withWidgetXCode.js","sourceRoot":"","sources":["../../src/ios/withWidgetXCode.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAsE;AACtE,wDAA0B;AAC1B,gDAAwB;AAExB,8DAA8D;AAC9D,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAM/B,MAAM,qBAAqB,GAAG,QAAQ,CAAC;AACvC,MAAM,eAAe,GAAG,CAAC,cAAc,EAAE,yBAAyB,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;AAE1H,MAAM,4BAA4B,GAAG;IACnC,8CAA8C,EAAE,aAAa;IAC7D,kDAAkD,EAAE,kBAAkB;IACtE,sBAAsB,EAAE,KAAK;IAC7B,uCAAuC,EAAE,gBAAgB;IACzD,2BAA2B,EAAE,WAAW;IACxC,sBAAsB,EAAE,KAAK;IAC7B,iCAAiC,EAAE,KAAK;IACxC,6CAA6C,EAAE,KAAK;IACpD,iCAAiC,EAAE,gBAAgB;IACnD,eAAe,EAAE,WAAW;IAC5B,uBAAuB,EAAE,GAAG;IAC5B,wBAAwB,EAAE,OAAO;IACjC,uBAAuB,EAAE,OAAO;IAChC,uBAAuB,EAAE,KAAK;IAC9B,cAAc,EAAE,mBAAmB;IACnC,iCAAiC,EAAE,QAAQ;IAC3C,sCAAsC,EAAE,IAAI;IAC5C,0BAA0B,EAAE,MAAM;IAClC,uBAAuB,EAAE,8EAA8E;IACvG,iBAAiB,EAAE,KAAK;IACxB,qBAAqB,EAAE,gBAAgB;IACvC,aAAa,EAAE,KAAK;IACpB,YAAY,EAAE,kBAAkB;IAChC,YAAY,EAAE,KAAK;IACnB,mCAAmC,EAAE,OAAO;IAC5C,sBAAsB,EAAE,KAAK;IAC7B,wBAAwB,EAAE,QAAQ;IAClC,aAAa,EAAE,KAAK;IACpB,sBAAsB,EAAE,OAAO;IAC/B,sBAAsB,EAAE,4BAA4B;CACrD,CAAC;AAEK,MAAM,eAAe,GAAkC,CAC5D,MAAM,EACN,UAA2B,EAAE,EAC7B,EAAE;IACF,OAAO,IAAA,iCAAgB,EAAC,MAAM,EAAE,KAAK,EAAC,SAAS,EAAC,EAAE;;QAChD,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,WAAW,CAAA;YACpD,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,WAAW,CAAA;YACpD,MAAM,mBAAmB,GAAG,SAAS,CAAC,UAAU,CAAC,mBAAmB,CAAA;YACpE,MAAM,mBAAmB,GAAG,cAAI,CAAC,IAAI,CACnC,WAAW,EACX,QAAQ,EACR,KAAK,EACL,QAAQ,CACT,CAAA;YACD,MAAM,QAAQ,GAAG,CAAA,MAAA,MAAM,CAAC,GAAG,0CAAE,gBAAgB,KAAI,EAAE,CAAA;YACnD,MAAM,cAAc,GAAG,GAAG,QAAQ,SAAS,CAAA;YAE3C,MAAM,iBAAiB,GAAG,cAAI,CAAC,IAAI,CACjC,mBAAmB,EACnB,qBAAqB,CACtB,CAAA;YACD,kBAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAA;YAEnD,MAAM,QAAQ,GAAG,GAAG,SAAS,CAAC,UAAU,CAAC,mBAAmB,IAAI,WAAW,4BAA4B,CAAA;YACvG,MAAM,eAAe,CAAC,QAAQ,EAAE,cAAc,EAAE,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,CAAA;YACxE,OAAO,SAAS,CAAA;QAClB,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YAChB,MAAM,CAAC,CAAA;QACT,CAAC;IACH,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC;AAhCW,QAAA,eAAe,mBAgC1B;AAEF,KAAK,UAAU,eAAe,CAC5B,QAAgB,EAChB,cAAsB,EACtB,iBAAyB;IAEzB,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IAE5C,YAAY,CAAC,KAAK,CAAC,GAAG,EAAE;QACtB,MAAM,QAAQ,GAAG,YAAY,CAAC,WAAW,CACvC,eAAe,EACf,qBAAqB,EACrB,qBAAqB,CACtB,CAAA;QAED,8DAA8D;QAC9D,uDAAuD;QACvD,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAA;QACzD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,QAAQ;YAC5C,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;gBACxC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;YACrD,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,6CAA6C;QAC7C,iEAAiE;QACjE,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAA;QACrD,WAAW,CAAC,qBAAqB,CAAC;YAChC,WAAW,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAA;QAC1C,WAAW,CAAC,uBAAuB,CAAC;YAClC,WAAW,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAA;QAE1C,aAAa;QACb,MAAM,YAAY,GAAG,YAAY,CAAC,SAAS,CACzC,qBAAqB,EACrB,eAAe,EACf,qBAAqB,EACrB,cAAc,CACf,CAAA;QAED,kBAAkB;QAClB,YAAY,CAAC,aAAa,CACxB,CAAC,cAAc,EAAE,yBAAyB,EAAE,mBAAmB,CAAC,EAChE,sBAAsB,EACtB,SAAS,EACT,YAAY,CAAC,IAAI,EACjB,SAAS,EACT,QAAQ,CACT,CAAA;QACD,YAAY,CAAC,aAAa,CACxB,CAAC,mBAAmB,EAAE,qBAAqB,CAAC,EAC5C,yBAAyB,EACzB,YAAY,EACZ,YAAY,CAAC,IAAI,CAClB,CAAA;QACD,YAAY,CAAC,aAAa,CACxB,CAAC,iBAAiB,CAAC,EACnB,wBAAwB,EACxB,WAAW,EACX,YAAY,CAAC,IAAI,EACjB,SAAS,EACT,QAAQ,CACT,CAAA;QAED,iCAAiC;QACjC,MAAM,cAAc,GAAG,YAAY,CAAC,8BAA8B,EAAE,CAAA;QAEpE,KAAK,MAAM,GAAG,IAAI,cAAc,EAAE,CAAC;YACjC,IAAI,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC,aAAa,KAAK,WAAW,EAAE,CAAC;gBAC7D,MAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,YAAY,CAAA;gBAClE,IAAI,WAAW,KAAK,IAAI,qBAAqB,GAAG,EAAE,CAAC;oBACjD,cAAc,CAAC,GAAG,CAAC,CAAC,aAAa,GAAG;wBAClC,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,aAAa;wBACpC,GAAG,4BAA4B;wBAC/B,gBAAgB,EAAE,iBAAiB;wBACnC,yBAAyB,EAAE,cAAc;qBAC1C,CAAA;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QAED,kBAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,YAAY,CAAC,SAAS,EAAE,CAAC,CAAA;IACtD,CAAC,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import { ConfigPlugin, withXcodeProject } from \"@expo/config-plugins\";\nimport fs from \"fs-extra\";\nimport path from \"path\";\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst xcode = require(\"xcode\");\n\ninterface WithWidgetProps {\n  devTeamId?: string;\n}\n\nconst EXTENSION_TARGET_NAME = \"widget\";\nconst TOP_LEVEL_FILES = [\"widget.swift\", \"SharedDataManager.swift\", \"TaskIntents.swift\", \"Assets.xcassets\", \"Info.plist\"];\n\nconst BUILD_CONFIGURATION_SETTINGS = {\n  ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME: \"AccentColor\",\n  ASSETCATALOG_COMPILER_WIDGET_BACKGROUND_COLOR_NAME: \"WidgetBackground\", \n  CLANG_ANALYZER_NONNULL: \"YES\",\n  CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION: \"YES_AGGRESSIVE\",\n  CLANG_CXX_LANGUAGE_STANDARD: '\"gnu++17\"',\n  CLANG_ENABLE_OBJC_WEAK: \"YES\",\n  CLANG_WARN_DOCUMENTATION_COMMENTS: \"YES\",\n  CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER: \"YES\",\n  CLANG_WARN_UNGUARDED_AVAILABILITY: \"YES_AGGRESSIVE\",\n  CODE_SIGN_STYLE: \"Automatic\",\n  CURRENT_PROJECT_VERSION: \"1\",\n  DEBUG_INFORMATION_FORMAT: \"dwarf\",\n  GCC_C_LANGUAGE_STANDARD: \"gnu11\",\n  GENERATE_INFOPLIST_FILE: \"YES\",\n  INFOPLIST_FILE: \"widget/Info.plist\",\n  INFOPLIST_KEY_CFBundleDisplayName: \"widget\",\n  INFOPLIST_KEY_NSHumanReadableCopyright: '\"\"',\n  IPHONEOS_DEPLOYMENT_TARGET: \"17.0\",\n  LD_RUNPATH_SEARCH_PATHS: '\"$(inherited) @executable_path/Frameworks @executable_path/../../Frameworks\"',\n  MARKETING_VERSION: \"1.0\",\n  MTL_ENABLE_DEBUG_INFO: \"INCLUDE_SOURCE\",\n  MTL_FAST_MATH: \"YES\",\n  PRODUCT_NAME: '\"$(TARGET_NAME)\"',\n  SKIP_INSTALL: \"YES\",\n  SWIFT_ACTIVE_COMPILATION_CONDITIONS: \"DEBUG\",\n  SWIFT_EMIT_LOC_STRINGS: \"YES\",\n  SWIFT_OPTIMIZATION_LEVEL: \"-Onone\",\n  SWIFT_VERSION: \"5.0\",\n  TARGETED_DEVICE_FAMILY: '\"1,2\"',\n  CODE_SIGN_ENTITLEMENTS: \"widget/widget.entitlements\",\n};\n\nexport const withWidgetXCode: ConfigPlugin<WithWidgetProps> = (\n  config,\n  options: WithWidgetProps = {}\n) => {\n  return withXcodeProject(config, async newConfig => {\n    try {\n      const projectName = newConfig.modRequest.projectName\n      const projectPath = newConfig.modRequest.projectRoot\n      const platformProjectPath = newConfig.modRequest.platformProjectRoot\n      const widgetSourceDirPath = path.join(\n        projectPath,\n        \"widget\",\n        \"ios\",\n        \"widget\",\n      )\n      const bundleId = config.ios?.bundleIdentifier || \"\"\n      const widgetBundleId = `${bundleId}.widget`\n\n      const extensionFilesDir = path.join(\n        platformProjectPath,\n        EXTENSION_TARGET_NAME,\n      )\n      fs.copySync(widgetSourceDirPath, extensionFilesDir)\n\n      const projPath = `${newConfig.modRequest.platformProjectRoot}/${projectName}.xcodeproj/project.pbxproj`\n      await updateXCodeProj(projPath, widgetBundleId, options.devTeamId || \"\")\n      return newConfig\n    } catch (e) {\n      console.error(e)\n      throw e\n    }\n  })\n};\n\nasync function updateXCodeProj(\n  projPath: string,\n  widgetBundleId: string,\n  developmentTeamId: string,\n) {\n  const xcodeProject = xcode.project(projPath)\n\n  xcodeProject.parse(() => {\n    const pbxGroup = xcodeProject.addPbxGroup(\n      TOP_LEVEL_FILES,\n      EXTENSION_TARGET_NAME,\n      EXTENSION_TARGET_NAME,\n    )\n\n    // Add the new PBXGroup to the top level group. This makes the\n    // files / folder appear in the file explorer in Xcode.\n    const groups = xcodeProject.hash.project.objects.PBXGroup\n    Object.keys(groups).forEach(function (groupKey) {\n      if (groups[groupKey].name === undefined) {\n        xcodeProject.addToPbxGroup(pbxGroup.uuid, groupKey)\n      }\n    })\n\n    // WORK AROUND for xcodeProject.addTarget BUG\n    // Xcode projects don't contain these if there is only one target\n    const projObjects = xcodeProject.hash.project.objects\n    projObjects[\"PBXTargetDependency\"] =\n      projObjects[\"PBXTargetDependency\"] || {}\n    projObjects[\"PBXContainerItemProxy\"] =\n      projObjects[\"PBXTargetDependency\"] || {}\n\n    // add target\n    const widgetTarget = xcodeProject.addTarget(\n      EXTENSION_TARGET_NAME,\n      \"app_extension\",\n      EXTENSION_TARGET_NAME,\n      widgetBundleId,\n    )\n\n    // add build phase\n    xcodeProject.addBuildPhase(\n      [\"widget.swift\", \"SharedDataManager.swift\", \"TaskIntents.swift\"],\n      \"PBXSourcesBuildPhase\",\n      \"Sources\",\n      widgetTarget.uuid,\n      undefined,\n      \"widget\",\n    )\n    xcodeProject.addBuildPhase(\n      [\"SwiftUI.framework\", \"WidgetKit.framework\"],\n      \"PBXFrameworksBuildPhase\",\n      \"Frameworks\",\n      widgetTarget.uuid,\n    )\n    xcodeProject.addBuildPhase(\n      [\"Assets.xcassets\"],\n      \"PBXResourcesBuildPhase\",\n      \"Resources\",\n      widgetTarget.uuid,\n      undefined,\n      \"widget\",\n    )\n\n    /* Update build configurations */\n    const configurations = xcodeProject.pbxXCBuildConfigurationSection()\n\n    for (const key in configurations) {\n      if (typeof configurations[key].buildSettings !== \"undefined\") {\n        const productName = configurations[key].buildSettings.PRODUCT_NAME\n        if (productName === `\"${EXTENSION_TARGET_NAME}\"`) {\n          configurations[key].buildSettings = {\n            ...configurations[key].buildSettings,\n            ...BUILD_CONFIGURATION_SETTINGS,\n            DEVELOPMENT_TEAM: developmentTeamId,\n            PRODUCT_BUNDLE_IDENTIFIER: widgetBundleId,\n          }\n        }\n      }\n    }\n\n    fs.writeFileSync(projPath, xcodeProject.writeSync())\n  })\n}"]}