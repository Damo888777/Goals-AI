{"version":3,"file":"withWidgetXCode.js","sourceRoot":"","sources":["../../src/ios/withWidgetXCode.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConfigPlugin, withXcodeProject } from \"@expo/config-plugins\";\nimport * as fs from \"fs-extra\";\nimport * as path from \"path\";\n\n// HILFSFUNKTION, UM DEN PROJEKTNAMEN ZU BEKOMMEN\nfunction getProjectName(config: any): string {\n  const { name } = config;\n  return name.replace(/[^A-Za-z0-9]/g, \"\");\n}\n\nexport const withWidgetXCode: ConfigPlugin<any> = (config, options = {}) => {\n  return withXcodeProject(config, (projectConfig) => {\n    const platformProjectRoot = projectConfig.modRequest.platformProjectRoot;\n    const projectRoot = projectConfig.modRequest.projectRoot;\n    const projectName = getProjectName(config);\n    \n    // Use the Expo-provided xcodeProject instead of manually parsing\n    const xcodeProject = projectConfig.modResults;\n\n    const targetName = \"widget\";\n    const bundleIdentifier = `${config.ios!.bundleIdentifier!}.${targetName}`;\n    const appGroupId = options.appGroupId || `group.${config.ios!.bundleIdentifier!}`;\n\n    const widgetPath = path.join(platformProjectRoot, targetName);\n    const sourcePath = path.join(projectRoot, \"widget/ios/widget\");\n    \n    fs.copySync(sourcePath, widgetPath, { overwrite: true });\n\n    const entitlementsPath = path.join(widgetPath, \"widget.entitlements\");\n    const entitlementsContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>com.apple.security.application-groups</key>\n  <array>\n    <string>${appGroupId}</string>\n  </array>\n</dict>\n</plist>`;\n    fs.writeFileSync(entitlementsPath, entitlementsContent);\n\n    if (xcodeProject.pbxTargetByName(targetName)) {\n      console.log(`[withWidgetXCode] Target '${targetName}' existiert bereits. Ãœberspringe Erstellung.`);\n      return projectConfig;\n    }\n\n    const widgetGroup = xcodeProject.addPbxGroup(\n      [\n        \"widget.swift\",\n        \"SharedDataManager.swift\",\n        \"TaskIntents.swift\",\n        \"Info.plist\",\n        \"Assets.xcassets\",\n        \"widget.entitlements\",\n      ],\n      targetName,\n      targetName\n    );\n\n    const groups = xcodeProject.hash.project.objects.PBXGroup;\n    for (const key of Object.keys(groups)) {\n      if (groups[key].name === undefined && groups[key].path === undefined) {\n        xcodeProject.addToPbxGroup(widgetGroup.uuid, key);\n        break;\n      }\n    }\n\n    const target = xcodeProject.addTarget(targetName, \"app_extension\", targetName);\n    \n    xcodeProject.addBuildPhase([], \"PBXSourcesBuildPhase\", \"Sources\", target.uuid);\n    xcodeProject.addBuildPhase([], \"PBXResourcesBuildPhase\", \"Resources\", target.uuid);\n    xcodeProject.addBuildPhase([], \"PBXFrameworksBuildPhase\", \"Frameworks\", target.uuid);\n\n    const configurations = xcodeProject.pbxXCBuildConfigurationSection();\n    for (const key in configurations) {\n      const buildSettings = configurations[key].buildSettings;\n      if (buildSettings && buildSettings.PRODUCT_NAME === `\"${targetName}\"`) {\n        buildSettings[\"PRODUCT_BUNDLE_IDENTIFIER\"] = `\"${bundleIdentifier}\"`;\n        buildSettings[\"IPHONEOS_DEPLOYMENT_TARGET\"] = `\"17.0\"`;\n        buildSettings[\"TARGETED_DEVICE_FAMILY\"] = `\"1,2\"`;\n        buildSettings[\"CODE_SIGN_STYLE\"] = `\"Automatic\"`;\n        buildSettings[\"INFOPLIST_FILE\"] = `\"${targetName}/Info.plist\"`;\n        buildSettings[\"PRODUCT_NAME\"] = `\"${targetName}\"`;\n        buildSettings[\"SWIFT_VERSION\"] = \"5.0\";\n        buildSettings[\"CODE_SIGN_ENTITLEMENTS\"] = `\"${targetName}/widget.entitlements\"`;\n        delete buildSettings.DEVELOPMENT_TEAM;\n      }\n    }\n\n    // Embed the widget target into the main app target\n    const mainTarget = xcodeProject.pbxTargetByName(projectName);\n    if (mainTarget) {\n      try {\n        // Add the widget as an app extension to the main target\n        xcodeProject.addTargetDependency(mainTarget.uuid, target.uuid);\n        console.log(`[withWidgetXCode] Widget target dependency added to main target.`);\n      } catch (error) {\n        console.log(`[withWidgetXCode] Could not add target dependency:`, error);\n      }\n    } else {\n      console.error(`[withWidgetXCode] FEHLER: Haupt-Target '${projectName}' konnte nicht gefunden werden!`);\n    }\n\n    return projectConfig;\n  });\n};"]}